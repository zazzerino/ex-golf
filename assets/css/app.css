@import "tailwindcss/base";
@import "tailwindcss/components";
@import "tailwindcss/utilities";

/* This file is for your main application CSS */

:root {
  --game-width: 500px;
  --game-height: 500px;

  --card-width: 60px;
  --card-height: 84px;

  --animation-time: 10s;

  --deck-x: calc(var(--card-width) / -2);
  --deck-y: 0px;

  --table-x: calc(var(--card-width) / 2);
  --table-y: 0px;

  --hand-bottom-x-offset: 0px;
  --hand-bottom-y-offset: calc(var(--game-height) / 2 - var(--card-height));

  --hand-top-x-offset: 0px;
  --hand-top-y-offset: calc(var(--game-height) / -2 + var(--card-height));

  --hand-left-x-offset: calc(var(--game-width) / -2 + var(--card-height));
  --hand-left-y-offset: 0px;

  --hand-right-x-offset: calc(var(--game-width) / 2 - var(--card-height));
  --hand-right-y-offset: 0px;

  --held-card-bottom-x-offset: calc(var(--card-width) * 2.5);
  --held-card-bottom-y-offset: var(--hand-bottom-y-offset);

  --held-card-top-x-offset: calc(var(--card-width) * -2.5);
  --held-card-top-y-offset: var(--hand-top-y-offset);

  --held-card-left-x-offset: var(--hand-left-x-offset);
  --held-card-left-y-offset: calc(var(--card-width) * 2.5);

  --held-card-right-x-offset: var(--hand-right-x-offset);
  --held-card-right-y-offset: calc(var(--card-width) * -2.5);
}

.game-svg {
  background-color: seagreen;
}

g.hand.bottom {
  transform: translate(var(--hand-bottom-x-offset), var(--hand-bottom-y-offset));
}

g.hand.top {
  transform: translate(var(--hand-top-x-offset), var(--hand-top-y-offset)) 
             rotate(180deg);
}

g.hand.left {
  transform: translate(var(--hand-left-x-offset), var(--hand-left-y-offset)) 
             rotate(90deg);
}

g.hand.right {
  transform: translate(var(--hand-right-x-offset), var(--hand-right-y-offset)) 
             rotate(270deg);
}

.card.held.bottom {
  transform: translate(var(--held-card-bottom-x-offset), var(--held-card-bottom-y-offset));
}

.card.held.top {
  transform: translate(var(--held-card-top-x-offset), var(--held-card-top-y-offset))
             rotate(180deg);
}

.card.held.left {
  transform: translate(var(--held-card-left-x-offset), var(--held-card-left-y-offset))
             rotate(90deg);
}

.card.held.right {
  transform: translate(var(--held-card-right-x-offset), var(--held-card-right-y-offset))
             rotate(270deg);
}

@keyframes slide-from-deck-to-held {
  from {
    transform: translate(var(--deck-x), var(--deck-y));
  }
}

.card.held.slide-from-deck {
  animation: slide-from-deck-to-held var(--animation-time);
}

@keyframes slide-from-table-to-held {
  from {
    transform: translate(var(--table-x), var(--table-y));
  }
}

.card.held.slide-from-table {
  animation: slide-from-table-to-held var(--animation-time);
}

@keyframes slide-from-deck-to-bottom-hand {
  from {
    x: calc(var(--card-width) * -1);
    y: calc(var(--hand-bottom-y-offset) * -1 - var(--card-height) / 2);
  }
}

.card.hand.bottom.slide-from-deck {
  animation: slide-from-deck-to-bottom-hand var(--animation-time);
}

@keyframes slide-from-deck-to-top-hand {
  from {
    x: 0;
    y: calc(var(--hand-bottom-y-offset) * -1 - var(--card-height) / 2);
  }
}

.card.hand.top.slide-from-deck {
  animation: slide-from-deck-to-top-hand var(--animation-time);
}

@keyframes slide-from-deck-to-left-hand {
  from {
    x: 0;
    y: 0;
  }
}

.card.hand.left.slide-from-deck {
  animation: slide-from-deck-to-left-hand var(--animation-time);
}
